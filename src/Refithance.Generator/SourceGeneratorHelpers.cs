using System.Collections.Immutable;
using System.Text;

namespace Refithance.Generator;

internal static class SourceGeneratorHelpers
{
    private const string Header = @"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the Refithance.Generator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";

    public const string AttributeFileName = "RefithanceAttribute.g.cs";

    public const string Attribute = Header + @"
namespace Refithance.Generator;

[global::System.AttributeUsage(global::System.AttributeTargets.Interface)]
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = ""This code was generated by the Refithance.Generator"")]
public class RefithanceAttribute : global::System.Attribute
{
}
";

    public const string ServiceCollectionExtensionsFileName = "RefithanceServiceCollectionExtensions.g.cs";

    public static string GenerateServiceCollectionExtensionsClass(StringBuilder stringBuilder,
        ImmutableArray<RefithanceInfo> source)
    {
        stringBuilder.Append(Header);
        stringBuilder.Append(@"
using Microsoft.Extensions.Options;
using Microsoft.Extensions.DependencyInjection;
using Refithance.Configuration;
using Refithance.Configuration.Validations;
using Refit;

namespace Refithance.Generator;
");
        stringBuilder.Append(@"
[global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage(Justification = ""This code was generated by the Refithance.Generator"")]
public static class RefithanceServiceCollectionExtensions
{

    public static void AddRefithance(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection serviceCollection)
    {
        serviceCollection.AddRefithanceValidation();

");

        foreach (var refithanceInfo in source)
        {
            stringBuilder.Append($$"""
                                           var httpClientBuilder{{refithanceInfo.Name}} = serviceCollection.AddRefitClient<global::{{refithanceInfo.FullName}}>();
                                           global::Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.AddTypedClient(httpClientBuilder{{refithanceInfo.Name}}, (httpClient, services) =>
                                               {
                                                   var definition = services.GetRequiredService<IOptionsSnapshot<RefithanceOptions>>().Value.Get("{{refithanceInfo.Name.Substring(1, refithanceInfo.Name.Length - 1)}}");
                                                   httpClient.BaseAddress = new Uri(definition.BaseAddress);
                                                   httpClient.Timeout = TimeSpan.FromMilliseconds(definition.TimeoutInMs);
                                                   return RestService.For<global::{{refithanceInfo.FullName}}>(httpClient);
                                               });
                                           global::Microsoft.Extensions.DependencyInjection.HttpClientBuilderExtensions.SetHandlerLifetime(httpClientBuilder{{refithanceInfo.Name}}, TimeSpan.FromMinutes(30));


                                   """);
        }

        stringBuilder.Append(@"
    }
}
");
        return stringBuilder.ToString();
    }
}
